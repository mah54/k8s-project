---
- hosts: cp-nodes
  become: true
  become_user: root
  
  vars:
    USER: "ubuntu"
    USER_HOME: "/home/ubuntu"

  tasks:

  - name: Get host ip
    shell: hostname  -I | cut -f1 -d' '
    register: ip_address
  - set_fact:
      ip_address={{ ip_address.stdout }}
      
  - name: Get host name
    shell: hostname
    register: hostname
  - set_fact:
      hostname={{ hostname.stdout }}

  - name: Add all node addresses to /etc/hosts
    shell: |
      echo '''
      ### Cluster nodes ###
      185.235.42.119 c1-cp1
      185.235.42.182 c1-cp2
      185.235.42.157 c1-cp3
      185.235.42.151 c1-node1
      185.235.42.146 c1-node2
      185.235.42.189 c1-node3
      #####################
      ''' >> /etc/hosts
      
  - name: Download calico.yaml for the pod network
    get_url:
      url: https://docs.projectcalico.org/manifests/calico.yaml
      dest: ~/calico.yaml
      
  - name: Set apiVersion to latest
    ansible.builtin.replace:
      path: ~/calico.yaml
      regexp: 'policy\/v1beta1'
      replace: 'policy/v1'
      
  - name: Generate a default kubeadm init configuration file
    shell: kubeadm config print init-defaults > ~/ClusterConfiguration.yaml
    
  - name: Change the address of the localAPIEndpoint.advertiseAddress to the Control Plane Node's IP address
    ansible.builtin.replace:
      path: ~/ClusterConfiguration.yaml
      regexp: '  advertiseAddress: 1\.2\.3\.4'
      replace: '  advertiseAddress: {{ ip_address }}'
      
  - name: Set the CRI Socket to point to containerd
    ansible.builtin.replace:
      path: ~/ClusterConfiguration.yaml
      regexp: '  criSocket: \/var\/run\/dockershim\.sock'
      replace: '  criSocket: /run/containerd/containerd.sock'
      
  - name: Set the kubelet cgroupDriver to systemd
    shell: |
      cat <<EOF >> ~/ClusterConfiguration.yaml
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd
      EOF
      
  - name: Initialize kubeadm .Add CRI socket since because there's still a check for docker in the kubeadm init process
    shell: |
      kubeadm init \
        --config=/root/ClusterConfiguration.yaml \
        --cri-socket /run/containerd/containerd.sock \
        --node-name={{ hostname }}
        
  - name: Create a .kube if it does not exist
    ansible.builtin.file:
      path: "{{ USER_HOME }}/.kube"
      state: directory

  - name: Configure an account on the Control Plane Node to have admin access to the API server from a non-privileged account
    ansible.builtin.copy:
      src: "/etc/kubernetes/admin.conf"
      dest: "{{ USER_HOME }}/.kube/config"
      owner: "{{ USER }}"
      group: "{{ USER }}"
      remote_src: yes
      
  - name: Create .kube if it does not exist at root
    ansible.builtin.file:
      path: "~/.kube"
      state: directory
      
  - name: Configure root on the Control Plane Node to have admin access to the API server from a non-privileged account
    ansible.builtin.copy:
      src: "/etc/kubernetes/admin.conf"
      dest: "~/.kube/config"
      owner: root
      group: root
      remote_src: yes
      
  - name: Deploy yaml file for pod network
    command: kubectl apply -f ~/calico.yaml
        
  
